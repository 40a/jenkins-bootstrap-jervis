//gradle plugins
apply plugin: 'maven'

//default
defaultTasks 'getjenkins', 'getplugins'

//perhaps use JENKINS_HOME some day
//avoiding JENKINS_HOME because I only want to copy if file doesn't exist
//by default the copy function will overwrite plugins in JENKINS_HOME if the hash is different
ext.jenkinsHome = System.getenv('JENKINS_HOME')?:'my_jenkins_home'
ext.bootstrapHome = System.getenv('BOOTSTRAP_HOME')?:'.'
ext.pluginsDest = bootstrapHome
ext.jenkinsDest = bootstrapHome

task clean(type: Delete, overwrite:true) {
    doFirst {
        //stop jenkins just in case it's running
        def stdout = new StringBuilder()
        def stderr = new StringBuilder()
        def process = ["${bootstrapHome}/scripts/provision_jenkins.sh", 'purge'].execute()
        process.waitForProcessOutput(stdout, stderr)
        println stdout.toString()
        println stderr.toString()
    }
    delete '.gradle'
    delete 'plugins'
}

configurations {
    getplugins {
        description = 'Download Jenkins plugins .jpi files.'
        transitive = false
    }
    getjenkins {
        description = 'Download Jenkins WAR file.'
        transitive = false
    }
}
repositories {
    maven {
        name 'jenkins'
        delegate.url('http://repo.jenkins-ci.org/public/')
    }
}
dependencies {
    //get Jenkins
    getjenkins 'org.jenkins-ci.main:jenkins-war:1.651.3@war'

    //get plugins
    getplugins 'com.coravy.hudson.plugins.github:github:1.19.2@hpi'
    getplugins 'com.nirima:docker-plugin:0.16.0@hpi'
    getplugins 'org.jenkins-ci.main:maven-plugin:2.13@hpi'
    getplugins 'org.jenkins-ci.plugins.icon-shim:icon-shim:2.0.3@hpi'
    getplugins 'org.jenkins-ci.plugins.workflow:workflow-scm-step:2.2@hpi'
    getplugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.2@hpi'
    getplugins 'org.jenkins-ci.plugins:ant:1.3@hpi'
    getplugins 'org.jenkins-ci.plugins:antisamy-markup-formatter:1.5@hpi'
    getplugins 'org.jenkins-ci.plugins:cloudbees-folder:5.12@hpi'
    getplugins 'org.jenkins-ci.plugins:console-column-plugin:1.5@hpi'
    getplugins 'org.jenkins-ci.plugins:credentials:2.1.4@hpi'
    getplugins 'org.jenkins-ci.plugins:cvs:2.12@hpi'
    getplugins 'org.jenkins-ci.plugins:dashboard-view:2.9.10@hpi'
    getplugins 'org.jenkins-ci.plugins:durable-task:1.11@hpi'
    getplugins 'org.jenkins-ci.plugins:embeddable-build-status:1.9@hpi'
    getplugins 'org.jenkins-ci.plugins:external-monitor-job:1.4@hpi'
    getplugins 'org.jenkins-ci.plugins:git-client:1.19.6@hpi'
    getplugins 'org.jenkins-ci.plugins:git:2.5.2@hpi'
    getplugins 'org.jenkins-ci.plugins:github-api:1.76@hpi'
    getplugins 'org.jenkins-ci.plugins:github-oauth:0.24@hpi'
    getplugins 'org.jenkins-ci.plugins:groovy:1.29@hpi'
    getplugins 'org.jenkins-ci.plugins:javadoc:1.4@hpi'
    getplugins 'org.jenkins-ci.plugins:job-dsl:1.48@hpi'
    getplugins 'org.jenkins-ci.plugins:junit:1.14@hpi'
    getplugins 'org.jenkins-ci.plugins:ldap:1.12@hpi'
    getplugins 'org.jenkins-ci.plugins:mailer:1.17@hpi'
    getplugins 'org.jenkins-ci.plugins:mapdb-api:1.0.9.0@hpi'
    getplugins 'org.jenkins-ci.plugins:matrix-auth:1.4@hpi'
    getplugins 'org.jenkins-ci.plugins:matrix-project:1.7.1@hpi'
    getplugins 'org.jenkins-ci.plugins:pam-auth:1.3@hpi'
    getplugins 'org.jenkins-ci.plugins:plain-credentials:1.2@hpi'
    getplugins 'org.jenkins-ci.plugins:rich-text-publisher-plugin:1.3@hpi'
    getplugins 'org.jenkins-ci.plugins:scm-api:1.2@hpi'
    getplugins 'org.jenkins-ci.plugins:script-security:1.20@hpi'
    getplugins 'org.jenkins-ci.plugins:ssh-credentials:1.12@hpi'
    getplugins 'org.jenkins-ci.plugins:ssh-slaves:1.11@hpi'
    getplugins 'org.jenkins-ci.plugins:structs:1.2@hpi'
    getplugins 'org.jenkins-ci.plugins:subversion:2.6@hpi'
    getplugins 'org.jenkins-ci.plugins:token-macro:1.12.1@hpi'
    getplugins 'org.jenkins-ci.plugins:translation:1.15@hpi'
    getplugins 'org.jenkins-ci.plugins:view-job-filters:1.27@hpi'
    getplugins 'org.jenkins-ci.plugins:windows-slaves:1.1@hpi'
}

//download and copy specific versions of plugins
task getplugins(type: Copy) {
    into "${pluginsDest}/plugins"
    from configurations.getplugins
    include '*.hpi'
    rename '(.*)-[.0-9]+.hpi$', '$1.jpi'
}

//download and copy a specific version of Jenkins
task getjenkins(type: Copy) {
    into jenkinsDest
    from configurations.getjenkins
    include '*.war'
    rename '.*', 'jenkins.war'
}
